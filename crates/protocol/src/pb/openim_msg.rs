// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDataToMq {
    #[prost(string, tag = "1")]
    pub token: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub msg_data: ::core::option::Option<super::openim_sdkws::MsgData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDataToDb {
    #[prost(message, optional, tag = "1")]
    pub msg_data: ::core::option::Option<super::openim_sdkws::MsgData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PushMsgDataToMq {
    #[prost(message, optional, tag = "1")]
    pub msg_data: ::core::option::Option<super::openim_sdkws::MsgData>,
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDataToMongoByMq {
    #[prost(int64, tag = "1")]
    pub last_seq: i64,
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "3")]
    pub msg_data: ::prost::alloc::vec::Vec<super::openim_sdkws::MsgData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMaxAndMinSeqReq {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetMaxAndMinSeqResp {
    #[prost(int64, tag = "1")]
    pub max_seq: i64,
    #[prost(int64, tag = "2")]
    pub min_seq: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendMsgReq {
    #[prost(message, optional, tag = "3")]
    pub msg_data: ::core::option::Option<super::openim_sdkws::MsgData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendMsgResp {
    #[prost(string, tag = "1")]
    pub server_msg_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub client_msg_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub send_time: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetSendMsgStatusReq {
    #[prost(int32, tag = "1")]
    pub status: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetSendMsgStatusResp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSendMsgStatusReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetSendMsgStatusResp {
    #[prost(int32, tag = "1")]
    pub status: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgDataToModifyByMq {
    #[prost(message, repeated, tag = "1")]
    pub messages: ::prost::alloc::vec::Vec<super::openim_sdkws::MsgData>,
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DelMsgsReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DelMsgsResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RevokeMsgReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub seq: i64,
    #[prost(string, tag = "3")]
    pub user_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RevokeMsgResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarkMsgsAsReadReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(int64, repeated, tag = "2")]
    pub seqs: ::prost::alloc::vec::Vec<i64>,
    #[prost(string, tag = "3")]
    pub user_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkMsgsAsReadResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarkConversationAsReadReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub has_read_seq: i64,
    #[prost(int64, repeated, tag = "4")]
    pub seqs: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkConversationAsReadResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetConversationHasReadSeqReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub has_read_seq: i64,
    #[prost(bool, tag = "4")]
    pub no_notification: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetConversationHasReadSeqResp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteSyncOpt {
    #[prost(bool, tag = "3")]
    pub is_sync_self: bool,
    #[prost(bool, tag = "4")]
    pub is_sync_other: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClearConversationsMsgReq {
    #[prost(string, repeated, tag = "1")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub delete_sync_opt: ::core::option::Option<DeleteSyncOpt>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClearConversationsMsgResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UserClearAllMsgReq {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub delete_sync_opt: ::core::option::Option<DeleteSyncOpt>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UserClearAllMsgResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteMsgsReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(int64, repeated, tag = "2")]
    pub seqs: ::prost::alloc::vec::Vec<i64>,
    #[prost(string, tag = "3")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub delete_sync_opt: ::core::option::Option<DeleteSyncOpt>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteMsgsResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteMsgPhysicalReq {
    #[prost(string, repeated, tag = "1")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int64, tag = "2")]
    pub timestamp: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteMsgPhysicalResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteMsgPhysicalBySeqReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(int64, repeated, tag = "2")]
    pub seqs: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteMsgPhysicalBySeqResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMaxSeqsReq {
    #[prost(string, repeated, tag = "1")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHasReadSeqsReq {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SeqsInfoResp {
    #[prost(map = "string, int64", tag = "1")]
    pub max_seqs: ::std::collections::HashMap<::prost::alloc::string::String, i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMsgByConversationIDsReq {
    #[prost(string, repeated, tag = "1")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(map = "string, int64", tag = "2")]
    pub max_seqs: ::std::collections::HashMap<::prost::alloc::string::String, i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMsgByConversationIDsResp {
    #[prost(map = "string, message", tag = "1")]
    pub msg_datas:
        ::std::collections::HashMap<::prost::alloc::string::String, super::openim_sdkws::MsgData>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationMaxSeqReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetConversationMaxSeqResp {
    #[prost(int64, tag = "1")]
    pub max_seq: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationsHasReadAndMaxSeqReq {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Seqs {
    #[prost(int64, tag = "1")]
    pub max_seq: i64,
    #[prost(int64, tag = "2")]
    pub has_read_seq: i64,
    #[prost(int64, tag = "3")]
    pub max_seq_time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationsHasReadAndMaxSeqResp {
    #[prost(map = "string, message", tag = "1")]
    pub seqs: ::std::collections::HashMap<::prost::alloc::string::String, Seqs>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetActiveUserReq {
    #[prost(int64, tag = "1")]
    pub start: i64,
    #[prost(int64, tag = "2")]
    pub end: i64,
    #[prost(bool, tag = "3")]
    pub ase: bool,
    #[prost(bool, tag = "4")]
    pub group: bool,
    #[prost(message, optional, tag = "5")]
    pub pagination: ::core::option::Option<super::openim_sdkws::RequestPagination>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActiveUser {
    #[prost(message, optional, tag = "1")]
    pub user: ::core::option::Option<super::openim_sdkws::UserInfo>,
    #[prost(int64, tag = "2")]
    pub count: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetActiveUserResp {
    #[prost(int64, tag = "1")]
    pub msg_count: i64,
    #[prost(int64, tag = "2")]
    pub user_count: i64,
    #[prost(map = "string, int64", tag = "3")]
    pub date_count: ::std::collections::HashMap<::prost::alloc::string::String, i64>,
    #[prost(message, repeated, tag = "4")]
    pub users: ::prost::alloc::vec::Vec<ActiveUser>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetActiveGroupReq {
    #[prost(int64, tag = "1")]
    pub start: i64,
    #[prost(int64, tag = "2")]
    pub end: i64,
    #[prost(bool, tag = "3")]
    pub ase: bool,
    #[prost(message, optional, tag = "4")]
    pub pagination: ::core::option::Option<super::openim_sdkws::RequestPagination>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActiveGroup {
    #[prost(message, optional, tag = "1")]
    pub group: ::core::option::Option<super::openim_sdkws::GroupInfo>,
    #[prost(int64, tag = "2")]
    pub count: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetActiveGroupResp {
    #[prost(int64, tag = "1")]
    pub msg_count: i64,
    #[prost(int64, tag = "2")]
    pub group_count: i64,
    #[prost(map = "string, int64", tag = "3")]
    pub date_count: ::std::collections::HashMap<::prost::alloc::string::String, i64>,
    #[prost(message, repeated, tag = "4")]
    pub groups: ::prost::alloc::vec::Vec<ActiveGroup>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchMessageReq {
    /// 发送者ID
    #[prost(string, tag = "1")]
    pub send_id: ::prost::alloc::string::String,
    /// 接收者ID
    #[prost(string, tag = "2")]
    pub recv_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub content_type: i32,
    #[prost(string, tag = "4")]
    pub send_time: ::prost::alloc::string::String,
    #[prost(int32, tag = "5")]
    pub session_type: i32,
    #[prost(message, optional, tag = "6")]
    pub pagination: ::core::option::Option<super::openim_sdkws::RequestPagination>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchChatLog {
    #[prost(message, optional, tag = "1")]
    pub chat_log: ::core::option::Option<ChatLog>,
    #[prost(bool, tag = "2")]
    pub is_revoked: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchedMsgData {
    #[prost(message, optional, tag = "1")]
    pub msg_data: ::core::option::Option<super::openim_sdkws::MsgData>,
    #[prost(bool, tag = "2")]
    pub is_revoked: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchMessageResp {
    #[prost(message, repeated, tag = "1")]
    pub chat_logs: ::prost::alloc::vec::Vec<SearchChatLog>,
    #[prost(int32, tag = "2")]
    pub chat_logs_num: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChatLog {
    #[prost(string, tag = "1")]
    pub server_msg_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub client_msg_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub send_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub recv_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub recv_nickname: ::prost::alloc::string::String,
    #[prost(int32, tag = "7")]
    pub sender_platform_id: i32,
    #[prost(string, tag = "8")]
    pub sender_nickname: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub sender_face_url: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub group_name: ::prost::alloc::string::String,
    #[prost(int32, tag = "11")]
    pub session_type: i32,
    #[prost(int32, tag = "12")]
    pub msg_from: i32,
    #[prost(int32, tag = "13")]
    pub content_type: i32,
    #[prost(string, tag = "14")]
    pub content: ::prost::alloc::string::String,
    #[prost(int32, tag = "15")]
    pub status: i32,
    #[prost(int64, tag = "16")]
    pub send_time: i64,
    #[prost(int64, tag = "17")]
    pub create_time: i64,
    #[prost(string, tag = "18")]
    pub ex: ::prost::alloc::string::String,
    #[prost(string, tag = "19")]
    pub group_face_url: ::prost::alloc::string::String,
    #[prost(uint32, tag = "20")]
    pub group_member_count: u32,
    #[prost(int64, tag = "21")]
    pub seq: i64,
    #[prost(string, tag = "22")]
    pub group_owner: ::prost::alloc::string::String,
    #[prost(int32, tag = "23")]
    pub group_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchSendMessageReq {
    #[prost(string, repeated, tag = "1")]
    pub recv_id_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub msg_data: ::core::option::Option<super::openim_sdkws::MsgData>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BatchSendMessageResp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetServerTimeReq {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetServerTimeResp {
    #[prost(int64, tag = "1")]
    pub server_time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClearMsgReq {
    #[prost(message, repeated, tag = "1")]
    pub conversations: ::prost::alloc::vec::Vec<super::openim_conversation::Conversation>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClearMsgResp {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DestructMsgsReq {
    #[prost(int64, tag = "1")]
    pub timestamp: i64,
    #[prost(int32, tag = "2")]
    pub limit: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DestructMsgsResp {
    #[prost(int32, tag = "1")]
    pub count: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetUserConversationsMinSeqReq {
    #[prost(string, repeated, tag = "1")]
    pub user_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "3")]
    pub seq: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetUserConversationsMinSeqResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConversationSeqs {
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(int64, repeated, tag = "3")]
    pub seqs: ::prost::alloc::vec::Vec<i64>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSeqMessageReq {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "2")]
    pub conversations: ::prost::alloc::vec::Vec<ConversationSeqs>,
    #[prost(enumeration = "super::openim_sdkws::PullOrder", tag = "3")]
    pub order: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSeqMessageResp {
    #[prost(map = "string, message", tag = "1")]
    pub msgs:
        ::std::collections::HashMap<::prost::alloc::string::String, super::openim_sdkws::PullMsgs>,
    #[prost(map = "string, message", tag = "2")]
    pub notification_msgs:
        ::std::collections::HashMap<::prost::alloc::string::String, super::openim_sdkws::PullMsgs>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetActiveConversationReq {
    #[prost(string, repeated, tag = "1")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int64, tag = "2")]
    pub limit: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActiveConversation {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub last_time: i64,
    #[prost(int64, tag = "3")]
    pub max_seq: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetActiveConversationResp {
    #[prost(message, repeated, tag = "1")]
    pub conversations: ::prost::alloc::vec::Vec<ActiveConversation>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppendStreamMsgReq {
    #[prost(string, tag = "1")]
    pub client_msg_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub start_index: i64,
    #[prost(string, repeated, tag = "3")]
    pub packets: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "4")]
    pub end: bool,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct AppendStreamMsgResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStreamMsgReq {
    #[prost(string, tag = "1")]
    pub client_msg_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetStreamMsgResp {
    #[prost(string, tag = "1")]
    pub client_msg_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "4")]
    pub packets: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "5")]
    pub end: bool,
    #[prost(int64, tag = "6")]
    pub create_time: i64,
    #[prost(int64, tag = "7")]
    pub deadline_time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetUserConversationMaxSeqReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub owner_user_id: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int64, tag = "3")]
    pub max_seq: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetUserConversationMaxSeqResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetUserConversationMinSeqReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub owner_user_id: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int64, tag = "3")]
    pub min_seq: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetUserConversationMinSeqResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLastMessageSeqByTimeReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(int64, tag = "2")]
    pub time: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetLastMessageSeqByTimeResp {
    #[prost(int64, tag = "1")]
    pub seq: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLastMessageReq {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetLastMessageResp {
    #[prost(map = "string, message", tag = "1")]
    pub msgs:
        ::std::collections::HashMap<::prost::alloc::string::String, super::openim_sdkws::MsgData>,
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// 发送消息
        pub async fn send_msg(
            &mut self,
            request: impl tonic::IntoRequest<super::SendMsgReq>,
        ) -> std::result::Result<tonic::Response<super::SendMsgResp>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/openim_msg.msg/SendMsg");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("openim_msg.msg", "SendMsg"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod msg_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MsgServer.
    #[async_trait]
    pub trait Msg: std::marker::Send + std::marker::Sync + 'static {
        /// 发送消息
        async fn send_msg(
            &self,
            request: tonic::Request<super::SendMsgReq>,
        ) -> std::result::Result<tonic::Response<super::SendMsgResp>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct MsgServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MsgServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MsgServer<T>
    where
        T: Msg,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/openim_msg.msg/SendMsg" => {
                    #[allow(non_camel_case_types)]
                    struct SendMsgSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::SendMsgReq> for SendMsgSvc<T> {
                        type Response = super::SendMsgResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SendMsgReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move { <T as Msg>::send_msg(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SendMsgSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(empty_body());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for MsgServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "openim_msg.msg";
    impl<T> tonic::server::NamedService for MsgServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
