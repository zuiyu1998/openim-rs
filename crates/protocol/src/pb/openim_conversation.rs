// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Conversation {
    #[prost(string, tag = "1")]
    pub owner_user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub recv_msg_opt: i32,
    #[prost(int32, tag = "4")]
    pub conversation_type: i32,
    #[prost(string, tag = "5")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "7")]
    pub is_pinned: bool,
    #[prost(string, tag = "8")]
    pub attached_info: ::prost::alloc::string::String,
    #[prost(bool, tag = "9")]
    pub is_private_chat: bool,
    #[prost(int32, tag = "10")]
    pub group_at_type: i32,
    #[prost(string, tag = "11")]
    pub ex: ::prost::alloc::string::String,
    #[prost(int32, tag = "12")]
    pub burn_duration: i32,
    #[prost(int64, tag = "13")]
    pub min_seq: i64,
    #[prost(int64, tag = "14")]
    pub max_seq: i64,
    #[prost(int64, tag = "15")]
    pub msg_destruct_time: i64,
    #[prost(int64, tag = "16")]
    pub latest_msg_destruct_time: i64,
    #[prost(bool, tag = "17")]
    pub is_msg_destruct: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConversationReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub conversation_type: i32,
    #[prost(string, tag = "3")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "5")]
    pub recv_msg_opt: ::core::option::Option<super::openim_protobuf::Int32Value>,
    #[prost(message, optional, tag = "6")]
    pub is_pinned: ::core::option::Option<super::openim_protobuf::BoolValue>,
    #[prost(message, optional, tag = "7")]
    pub attached_info: ::core::option::Option<super::openim_protobuf::StringValue>,
    #[prost(message, optional, tag = "8")]
    pub is_private_chat: ::core::option::Option<super::openim_protobuf::BoolValue>,
    #[prost(message, optional, tag = "9")]
    pub ex: ::core::option::Option<super::openim_protobuf::StringValue>,
    #[prost(message, optional, tag = "10")]
    pub burn_duration: ::core::option::Option<super::openim_protobuf::Int32Value>,
    #[prost(message, optional, tag = "11")]
    pub min_seq: ::core::option::Option<super::openim_protobuf::Int64Value>,
    #[prost(message, optional, tag = "12")]
    pub max_seq: ::core::option::Option<super::openim_protobuf::Int64Value>,
    #[prost(message, optional, tag = "13")]
    pub group_at_type: ::core::option::Option<super::openim_protobuf::Int32Value>,
    #[prost(message, optional, tag = "14")]
    pub msg_destruct_time: ::core::option::Option<super::openim_protobuf::Int64Value>,
    #[prost(message, optional, tag = "15")]
    pub is_msg_destruct: ::core::option::Option<super::openim_protobuf::BoolValue>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetConversationReq {
    #[prost(message, optional, tag = "1")]
    pub conversation: ::core::option::Option<Conversation>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetConversationResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub owner_user_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationResp {
    #[prost(message, optional, tag = "2")]
    pub conversation: ::core::option::Option<Conversation>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSortedConversationListReq {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub pagination: ::core::option::Option<super::openim_sdkws::RequestPagination>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSortedConversationListResp {
    #[prost(int64, tag = "1")]
    pub conversation_total: i64,
    #[prost(int64, tag = "2")]
    pub unread_total: i64,
    #[prost(message, repeated, tag = "3")]
    pub conversation_elems: ::prost::alloc::vec::Vec<ConversationElem>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ConversationElem {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "2")]
    pub recv_msg_opt: i32,
    #[prost(int64, tag = "3")]
    pub unread_count: i64,
    #[prost(bool, tag = "4")]
    pub is_pinned: bool,
    #[prost(message, optional, tag = "5")]
    pub msg_info: ::core::option::Option<MsgInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgInfo {
    #[prost(string, tag = "1")]
    pub server_msg_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub client_msg_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub session_type: i32,
    #[prost(string, tag = "4")]
    pub send_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub recv_id: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub sender_name: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub face_url: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub group_id: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub group_name: ::prost::alloc::string::String,
    #[prost(string, tag = "10")]
    pub group_face_url: ::prost::alloc::string::String,
    #[prost(int32, tag = "11")]
    pub group_type: i32,
    #[prost(uint32, tag = "12")]
    pub group_member_count: u32,
    #[prost(int64, tag = "13")]
    pub latest_msg_recv_time: i64,
    #[prost(int32, tag = "14")]
    pub msg_from: i32,
    #[prost(int32, tag = "15")]
    pub content_type: i32,
    #[prost(string, tag = "16")]
    pub content: ::prost::alloc::string::String,
    #[prost(string, tag = "17")]
    pub ex: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationsReq {
    #[prost(string, tag = "1")]
    pub owner_user_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationsResp {
    #[prost(message, repeated, tag = "2")]
    pub conversations: ::prost::alloc::vec::Vec<Conversation>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllConversationsReq {
    #[prost(string, tag = "1")]
    pub owner_user_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllConversationsResp {
    #[prost(message, repeated, tag = "2")]
    pub conversations: ::prost::alloc::vec::Vec<Conversation>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRecvMsgNotNotifyUserIDsReq {
    #[prost(string, tag = "1")]
    pub group_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRecvMsgNotNotifyUserIDsResp {
    #[prost(string, repeated, tag = "1")]
    pub user_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateSingleChatConversationsReq {
    #[prost(string, tag = "1")]
    pub recv_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub send_id: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub conversation_type: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateSingleChatConversationsResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateGroupChatConversationsReq {
    #[prost(string, repeated, tag = "1")]
    pub user_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "2")]
    pub group_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateGroupChatConversationsResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetConversationMaxSeqReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub owner_user_id: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int64, tag = "3")]
    pub max_seq: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetConversationMaxSeqResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetConversationMinSeqReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub owner_user_id: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int64, tag = "3")]
    pub min_seq: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetConversationMinSeqResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationIDsReq {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationIDsResp {
    #[prost(string, repeated, tag = "1")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetConversationsReq {
    #[prost(string, repeated, tag = "1")]
    pub user_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub conversation: ::core::option::Option<ConversationReq>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetConversationsResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetUserConversationIDsHashReq {
    #[prost(string, tag = "1")]
    pub owner_user_id: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetUserConversationIDsHashResp {
    #[prost(uint64, tag = "1")]
    pub hash: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationsByConversationIdReq {
    #[prost(string, repeated, tag = "1")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationsByConversationIdResp {
    #[prost(message, repeated, tag = "1")]
    pub conversations: ::prost::alloc::vec::Vec<Conversation>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationOfflinePushUserIDsReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub user_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationOfflinePushUserIDsResp {
    #[prost(string, repeated, tag = "1")]
    pub user_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationNotReceiveMessageUserIDsReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationNotReceiveMessageUserIDsResp {
    #[prost(string, repeated, tag = "1")]
    pub user_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateConversationReq {
    #[prost(string, tag = "1")]
    pub conversation_id: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "2")]
    pub user_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub recv_msg_opt: ::core::option::Option<super::openim_protobuf::Int32Value>,
    #[prost(message, optional, tag = "4")]
    pub is_pinned: ::core::option::Option<super::openim_protobuf::BoolValue>,
    #[prost(message, optional, tag = "5")]
    pub attached_info: ::core::option::Option<super::openim_protobuf::StringValue>,
    #[prost(message, optional, tag = "6")]
    pub is_private_chat: ::core::option::Option<super::openim_protobuf::BoolValue>,
    #[prost(message, optional, tag = "7")]
    pub ex: ::core::option::Option<super::openim_protobuf::StringValue>,
    #[prost(message, optional, tag = "8")]
    pub burn_duration: ::core::option::Option<super::openim_protobuf::Int32Value>,
    #[prost(message, optional, tag = "9")]
    pub min_seq: ::core::option::Option<super::openim_protobuf::Int64Value>,
    #[prost(message, optional, tag = "10")]
    pub max_seq: ::core::option::Option<super::openim_protobuf::Int64Value>,
    #[prost(message, optional, tag = "11")]
    pub group_at_type: ::core::option::Option<super::openim_protobuf::Int32Value>,
    #[prost(message, optional, tag = "12")]
    pub msg_destruct_time: ::core::option::Option<super::openim_protobuf::Int64Value>,
    #[prost(message, optional, tag = "13")]
    pub is_msg_destruct: ::core::option::Option<super::openim_protobuf::BoolValue>,
    #[prost(message, optional, tag = "14")]
    pub latest_msg_destruct_time: ::core::option::Option<super::openim_protobuf::Int64Value>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateConversationResp {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFullOwnerConversationIDsReq {
    #[prost(uint64, tag = "1")]
    pub id_hash: u64,
    #[prost(string, tag = "2")]
    pub user_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFullOwnerConversationIDsResp {
    #[prost(uint64, tag = "1")]
    pub version: u64,
    #[prost(string, tag = "2")]
    pub version_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub equal: bool,
    #[prost(string, repeated, tag = "4")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIncrementalConversationReq {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub version_id: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub version: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetIncrementalConversationResp {
    #[prost(uint64, tag = "1")]
    pub version: u64,
    #[prost(string, tag = "2")]
    pub version_id: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub full: bool,
    #[prost(string, repeated, tag = "4")]
    pub delete: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "5")]
    pub insert: ::prost::alloc::vec::Vec<Conversation>,
    #[prost(message, repeated, tag = "6")]
    pub update: ::prost::alloc::vec::Vec<Conversation>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOwnerConversationReq {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<super::openim_sdkws::RequestPagination>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetOwnerConversationResp {
    #[prost(int64, tag = "1")]
    pub total: i64,
    #[prost(message, repeated, tag = "2")]
    pub conversations: ::prost::alloc::vec::Vec<Conversation>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetConversationsNeedClearMsgReq {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetConversationsNeedClearMsgResp {
    #[prost(message, repeated, tag = "1")]
    pub conversations: ::prost::alloc::vec::Vec<Conversation>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNotNotifyConversationIDsReq {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetNotNotifyConversationIDsResp {
    #[prost(string, repeated, tag = "1")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPinnedConversationIDsReq {
    #[prost(string, tag = "1")]
    pub user_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPinnedConversationIDsResp {
    #[prost(string, repeated, tag = "1")]
    pub conversation_i_ds: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClearUserConversationMsgReq {
    #[prost(int64, tag = "1")]
    pub timestamp: i64,
    #[prost(int32, tag = "2")]
    pub limit: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ClearUserConversationMsgResp {
    #[prost(int32, tag = "1")]
    pub count: i32,
}
/// Generated client implementations.
pub mod conversation_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    #[derive(Debug, Clone)]
    pub struct ConversationClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ConversationClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ConversationClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ConversationClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ConversationClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn get_conversation(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConversationReq>,
        ) -> std::result::Result<tonic::Response<super::GetConversationResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetConversation",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetConversation",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_sorted_conversation_list(
            &mut self,
            request: impl tonic::IntoRequest<super::GetSortedConversationListReq>,
        ) -> std::result::Result<tonic::Response<super::GetSortedConversationListResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetSortedConversationList",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetSortedConversationList",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_all_conversations(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAllConversationsReq>,
        ) -> std::result::Result<tonic::Response<super::GetAllConversationsResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetAllConversations",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetAllConversations",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_conversations(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConversationsReq>,
        ) -> std::result::Result<tonic::Response<super::GetConversationsResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetConversations",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetConversations",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn set_conversation(
            &mut self,
            request: impl tonic::IntoRequest<super::SetConversationReq>,
        ) -> std::result::Result<tonic::Response<super::SetConversationResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/SetConversation",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "SetConversation",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_recv_msg_not_notify_user_i_ds(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRecvMsgNotNotifyUserIDsReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetRecvMsgNotNotifyUserIDsResp>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetRecvMsgNotNotifyUserIDs",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetRecvMsgNotNotifyUserIDs",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_single_chat_conversations(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateSingleChatConversationsReq>,
        ) -> std::result::Result<
            tonic::Response<super::CreateSingleChatConversationsResp>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/CreateSingleChatConversations",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "CreateSingleChatConversations",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_group_chat_conversations(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateGroupChatConversationsReq>,
        ) -> std::result::Result<
            tonic::Response<super::CreateGroupChatConversationsResp>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/CreateGroupChatConversations",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "CreateGroupChatConversations",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn set_conversation_max_seq(
            &mut self,
            request: impl tonic::IntoRequest<super::SetConversationMaxSeqReq>,
        ) -> std::result::Result<tonic::Response<super::SetConversationMaxSeqResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/SetConversationMaxSeq",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "SetConversationMaxSeq",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn set_conversation_min_seq(
            &mut self,
            request: impl tonic::IntoRequest<super::SetConversationMinSeqReq>,
        ) -> std::result::Result<tonic::Response<super::SetConversationMinSeqResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/SetConversationMinSeq",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "SetConversationMinSeq",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_conversation_i_ds(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConversationIDsReq>,
        ) -> std::result::Result<tonic::Response<super::GetConversationIDsResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetConversationIDs",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetConversationIDs",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn set_conversations(
            &mut self,
            request: impl tonic::IntoRequest<super::SetConversationsReq>,
        ) -> std::result::Result<tonic::Response<super::SetConversationsResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/SetConversations",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "SetConversations",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_user_conversation_i_ds_hash(
            &mut self,
            request: impl tonic::IntoRequest<super::GetUserConversationIDsHashReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetUserConversationIDsHashResp>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetUserConversationIDsHash",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetUserConversationIDsHash",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_conversations_by_conversation_id(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConversationsByConversationIdReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetConversationsByConversationIdResp>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetConversationsByConversationID",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetConversationsByConversationID",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_conversation_offline_push_user_i_ds(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConversationOfflinePushUserIDsReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetConversationOfflinePushUserIDsResp>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetConversationOfflinePushUserIDs",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetConversationOfflinePushUserIDs",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_conversation_not_receive_message_user_i_ds(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConversationNotReceiveMessageUserIDsReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetConversationNotReceiveMessageUserIDsResp>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetConversationNotReceiveMessageUserIDs",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetConversationNotReceiveMessageUserIDs",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_conversation(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateConversationReq>,
        ) -> std::result::Result<tonic::Response<super::UpdateConversationResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/UpdateConversation",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "UpdateConversation",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_full_owner_conversation_i_ds(
            &mut self,
            request: impl tonic::IntoRequest<super::GetFullOwnerConversationIDsReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetFullOwnerConversationIDsResp>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetFullOwnerConversationIDs",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetFullOwnerConversationIDs",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_incremental_conversation(
            &mut self,
            request: impl tonic::IntoRequest<super::GetIncrementalConversationReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetIncrementalConversationResp>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetIncrementalConversation",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetIncrementalConversation",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_owner_conversation(
            &mut self,
            request: impl tonic::IntoRequest<super::GetOwnerConversationReq>,
        ) -> std::result::Result<tonic::Response<super::GetOwnerConversationResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetOwnerConversation",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetOwnerConversation",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_conversations_need_clear_msg(
            &mut self,
            request: impl tonic::IntoRequest<super::GetConversationsNeedClearMsgReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetConversationsNeedClearMsgResp>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetConversationsNeedClearMsg",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetConversationsNeedClearMsg",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_not_notify_conversation_i_ds(
            &mut self,
            request: impl tonic::IntoRequest<super::GetNotNotifyConversationIDsReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetNotNotifyConversationIDsResp>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetNotNotifyConversationIDs",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetNotNotifyConversationIDs",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_pinned_conversation_i_ds(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPinnedConversationIDsReq>,
        ) -> std::result::Result<tonic::Response<super::GetPinnedConversationIDsResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/GetPinnedConversationIDs",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "GetPinnedConversationIDs",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn clear_user_conversation_msg(
            &mut self,
            request: impl tonic::IntoRequest<super::ClearUserConversationMsgReq>,
        ) -> std::result::Result<tonic::Response<super::ClearUserConversationMsgResp>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/openim_conversation.conversation/ClearUserConversationMsg",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "openim_conversation.conversation",
                "ClearUserConversationMsg",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod conversation_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ConversationServer.
    #[async_trait]
    pub trait Conversation: std::marker::Send + std::marker::Sync + 'static {
        async fn get_conversation(
            &self,
            request: tonic::Request<super::GetConversationReq>,
        ) -> std::result::Result<tonic::Response<super::GetConversationResp>, tonic::Status>;
        async fn get_sorted_conversation_list(
            &self,
            request: tonic::Request<super::GetSortedConversationListReq>,
        ) -> std::result::Result<tonic::Response<super::GetSortedConversationListResp>, tonic::Status>;
        async fn get_all_conversations(
            &self,
            request: tonic::Request<super::GetAllConversationsReq>,
        ) -> std::result::Result<tonic::Response<super::GetAllConversationsResp>, tonic::Status>;
        async fn get_conversations(
            &self,
            request: tonic::Request<super::GetConversationsReq>,
        ) -> std::result::Result<tonic::Response<super::GetConversationsResp>, tonic::Status>;
        async fn set_conversation(
            &self,
            request: tonic::Request<super::SetConversationReq>,
        ) -> std::result::Result<tonic::Response<super::SetConversationResp>, tonic::Status>;
        async fn get_recv_msg_not_notify_user_i_ds(
            &self,
            request: tonic::Request<super::GetRecvMsgNotNotifyUserIDsReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetRecvMsgNotNotifyUserIDsResp>,
            tonic::Status,
        >;
        async fn create_single_chat_conversations(
            &self,
            request: tonic::Request<super::CreateSingleChatConversationsReq>,
        ) -> std::result::Result<
            tonic::Response<super::CreateSingleChatConversationsResp>,
            tonic::Status,
        >;
        async fn create_group_chat_conversations(
            &self,
            request: tonic::Request<super::CreateGroupChatConversationsReq>,
        ) -> std::result::Result<
            tonic::Response<super::CreateGroupChatConversationsResp>,
            tonic::Status,
        >;
        async fn set_conversation_max_seq(
            &self,
            request: tonic::Request<super::SetConversationMaxSeqReq>,
        ) -> std::result::Result<tonic::Response<super::SetConversationMaxSeqResp>, tonic::Status>;
        async fn set_conversation_min_seq(
            &self,
            request: tonic::Request<super::SetConversationMinSeqReq>,
        ) -> std::result::Result<tonic::Response<super::SetConversationMinSeqResp>, tonic::Status>;
        async fn get_conversation_i_ds(
            &self,
            request: tonic::Request<super::GetConversationIDsReq>,
        ) -> std::result::Result<tonic::Response<super::GetConversationIDsResp>, tonic::Status>;
        async fn set_conversations(
            &self,
            request: tonic::Request<super::SetConversationsReq>,
        ) -> std::result::Result<tonic::Response<super::SetConversationsResp>, tonic::Status>;
        async fn get_user_conversation_i_ds_hash(
            &self,
            request: tonic::Request<super::GetUserConversationIDsHashReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetUserConversationIDsHashResp>,
            tonic::Status,
        >;
        async fn get_conversations_by_conversation_id(
            &self,
            request: tonic::Request<super::GetConversationsByConversationIdReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetConversationsByConversationIdResp>,
            tonic::Status,
        >;
        async fn get_conversation_offline_push_user_i_ds(
            &self,
            request: tonic::Request<super::GetConversationOfflinePushUserIDsReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetConversationOfflinePushUserIDsResp>,
            tonic::Status,
        >;
        async fn get_conversation_not_receive_message_user_i_ds(
            &self,
            request: tonic::Request<super::GetConversationNotReceiveMessageUserIDsReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetConversationNotReceiveMessageUserIDsResp>,
            tonic::Status,
        >;
        async fn update_conversation(
            &self,
            request: tonic::Request<super::UpdateConversationReq>,
        ) -> std::result::Result<tonic::Response<super::UpdateConversationResp>, tonic::Status>;
        async fn get_full_owner_conversation_i_ds(
            &self,
            request: tonic::Request<super::GetFullOwnerConversationIDsReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetFullOwnerConversationIDsResp>,
            tonic::Status,
        >;
        async fn get_incremental_conversation(
            &self,
            request: tonic::Request<super::GetIncrementalConversationReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetIncrementalConversationResp>,
            tonic::Status,
        >;
        async fn get_owner_conversation(
            &self,
            request: tonic::Request<super::GetOwnerConversationReq>,
        ) -> std::result::Result<tonic::Response<super::GetOwnerConversationResp>, tonic::Status>;
        async fn get_conversations_need_clear_msg(
            &self,
            request: tonic::Request<super::GetConversationsNeedClearMsgReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetConversationsNeedClearMsgResp>,
            tonic::Status,
        >;
        async fn get_not_notify_conversation_i_ds(
            &self,
            request: tonic::Request<super::GetNotNotifyConversationIDsReq>,
        ) -> std::result::Result<
            tonic::Response<super::GetNotNotifyConversationIDsResp>,
            tonic::Status,
        >;
        async fn get_pinned_conversation_i_ds(
            &self,
            request: tonic::Request<super::GetPinnedConversationIDsReq>,
        ) -> std::result::Result<tonic::Response<super::GetPinnedConversationIDsResp>, tonic::Status>;
        async fn clear_user_conversation_msg(
            &self,
            request: tonic::Request<super::ClearUserConversationMsgReq>,
        ) -> std::result::Result<tonic::Response<super::ClearUserConversationMsgResp>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct ConversationServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ConversationServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ConversationServer<T>
    where
        T: Conversation,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/openim_conversation.conversation/GetConversation" => {
                    #[allow(non_camel_case_types)]
                    struct GetConversationSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation> tonic::server::UnaryService<super::GetConversationReq>
                        for GetConversationSvc<T>
                    {
                        type Response = super::GetConversationResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetConversationReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_conversation(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetConversationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetSortedConversationList" => {
                    #[allow(non_camel_case_types)]
                    struct GetSortedConversationListSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::GetSortedConversationListReq>
                        for GetSortedConversationListSvc<T>
                    {
                        type Response = super::GetSortedConversationListResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetSortedConversationListReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_sorted_conversation_list(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSortedConversationListSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetAllConversations" => {
                    #[allow(non_camel_case_types)]
                    struct GetAllConversationsSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation> tonic::server::UnaryService<super::GetAllConversationsReq>
                        for GetAllConversationsSvc<T>
                    {
                        type Response = super::GetAllConversationsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetAllConversationsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_all_conversations(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAllConversationsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetConversations" => {
                    #[allow(non_camel_case_types)]
                    struct GetConversationsSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation> tonic::server::UnaryService<super::GetConversationsReq>
                        for GetConversationsSvc<T>
                    {
                        type Response = super::GetConversationsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetConversationsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_conversations(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetConversationsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/SetConversation" => {
                    #[allow(non_camel_case_types)]
                    struct SetConversationSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation> tonic::server::UnaryService<super::SetConversationReq>
                        for SetConversationSvc<T>
                    {
                        type Response = super::SetConversationResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetConversationReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::set_conversation(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetConversationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetRecvMsgNotNotifyUserIDs" => {
                    #[allow(non_camel_case_types)]
                    struct GetRecvMsgNotNotifyUserIDsSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::GetRecvMsgNotNotifyUserIDsReq>
                        for GetRecvMsgNotNotifyUserIDsSvc<T>
                    {
                        type Response = super::GetRecvMsgNotNotifyUserIDsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetRecvMsgNotNotifyUserIDsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_recv_msg_not_notify_user_i_ds(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetRecvMsgNotNotifyUserIDsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/CreateSingleChatConversations" => {
                    #[allow(non_camel_case_types)]
                    struct CreateSingleChatConversationsSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::CreateSingleChatConversationsReq>
                        for CreateSingleChatConversationsSvc<T>
                    {
                        type Response = super::CreateSingleChatConversationsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateSingleChatConversationsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::create_single_chat_conversations(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateSingleChatConversationsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/CreateGroupChatConversations" => {
                    #[allow(non_camel_case_types)]
                    struct CreateGroupChatConversationsSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::CreateGroupChatConversationsReq>
                        for CreateGroupChatConversationsSvc<T>
                    {
                        type Response = super::CreateGroupChatConversationsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateGroupChatConversationsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::create_group_chat_conversations(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateGroupChatConversationsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/SetConversationMaxSeq" => {
                    #[allow(non_camel_case_types)]
                    struct SetConversationMaxSeqSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::SetConversationMaxSeqReq>
                        for SetConversationMaxSeqSvc<T>
                    {
                        type Response = super::SetConversationMaxSeqResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetConversationMaxSeqReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::set_conversation_max_seq(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetConversationMaxSeqSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/SetConversationMinSeq" => {
                    #[allow(non_camel_case_types)]
                    struct SetConversationMinSeqSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::SetConversationMinSeqReq>
                        for SetConversationMinSeqSvc<T>
                    {
                        type Response = super::SetConversationMinSeqResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetConversationMinSeqReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::set_conversation_min_seq(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetConversationMinSeqSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetConversationIDs" => {
                    #[allow(non_camel_case_types)]
                    struct GetConversationIDsSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation> tonic::server::UnaryService<super::GetConversationIDsReq>
                        for GetConversationIDsSvc<T>
                    {
                        type Response = super::GetConversationIDsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetConversationIDsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_conversation_i_ds(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetConversationIDsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/SetConversations" => {
                    #[allow(non_camel_case_types)]
                    struct SetConversationsSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation> tonic::server::UnaryService<super::SetConversationsReq>
                        for SetConversationsSvc<T>
                    {
                        type Response = super::SetConversationsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SetConversationsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::set_conversations(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SetConversationsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetUserConversationIDsHash" => {
                    #[allow(non_camel_case_types)]
                    struct GetUserConversationIDsHashSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::GetUserConversationIDsHashReq>
                        for GetUserConversationIDsHashSvc<T>
                    {
                        type Response = super::GetUserConversationIDsHashResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetUserConversationIDsHashReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_user_conversation_i_ds_hash(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetUserConversationIDsHashSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetConversationsByConversationID" => {
                    #[allow(non_camel_case_types)]
                    struct GetConversationsByConversationIDSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::GetConversationsByConversationIdReq>
                        for GetConversationsByConversationIDSvc<T>
                    {
                        type Response = super::GetConversationsByConversationIdResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetConversationsByConversationIdReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_conversations_by_conversation_id(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetConversationsByConversationIDSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetConversationOfflinePushUserIDs" => {
                    #[allow(non_camel_case_types)]
                    struct GetConversationOfflinePushUserIDsSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::GetConversationOfflinePushUserIDsReq>
                        for GetConversationOfflinePushUserIDsSvc<T>
                    {
                        type Response = super::GetConversationOfflinePushUserIDsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetConversationOfflinePushUserIDsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_conversation_offline_push_user_i_ds(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetConversationOfflinePushUserIDsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetConversationNotReceiveMessageUserIDs" => {
                    #[allow(non_camel_case_types)]
                    struct GetConversationNotReceiveMessageUserIDsSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<
                            super::GetConversationNotReceiveMessageUserIDsReq,
                        > for GetConversationNotReceiveMessageUserIDsSvc<T>
                    {
                        type Response = super::GetConversationNotReceiveMessageUserIDsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetConversationNotReceiveMessageUserIDsReq,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_conversation_not_receive_message_user_i_ds(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetConversationNotReceiveMessageUserIDsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/UpdateConversation" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateConversationSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation> tonic::server::UnaryService<super::UpdateConversationReq>
                        for UpdateConversationSvc<T>
                    {
                        type Response = super::UpdateConversationResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateConversationReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::update_conversation(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateConversationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetFullOwnerConversationIDs" => {
                    #[allow(non_camel_case_types)]
                    struct GetFullOwnerConversationIDsSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::GetFullOwnerConversationIDsReq>
                        for GetFullOwnerConversationIDsSvc<T>
                    {
                        type Response = super::GetFullOwnerConversationIDsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetFullOwnerConversationIDsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_full_owner_conversation_i_ds(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetFullOwnerConversationIDsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetIncrementalConversation" => {
                    #[allow(non_camel_case_types)]
                    struct GetIncrementalConversationSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::GetIncrementalConversationReq>
                        for GetIncrementalConversationSvc<T>
                    {
                        type Response = super::GetIncrementalConversationResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetIncrementalConversationReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_incremental_conversation(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetIncrementalConversationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetOwnerConversation" => {
                    #[allow(non_camel_case_types)]
                    struct GetOwnerConversationSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::GetOwnerConversationReq>
                        for GetOwnerConversationSvc<T>
                    {
                        type Response = super::GetOwnerConversationResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetOwnerConversationReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_owner_conversation(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetOwnerConversationSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetConversationsNeedClearMsg" => {
                    #[allow(non_camel_case_types)]
                    struct GetConversationsNeedClearMsgSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::GetConversationsNeedClearMsgReq>
                        for GetConversationsNeedClearMsgSvc<T>
                    {
                        type Response = super::GetConversationsNeedClearMsgResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetConversationsNeedClearMsgReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_conversations_need_clear_msg(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetConversationsNeedClearMsgSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetNotNotifyConversationIDs" => {
                    #[allow(non_camel_case_types)]
                    struct GetNotNotifyConversationIDsSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::GetNotNotifyConversationIDsReq>
                        for GetNotNotifyConversationIDsSvc<T>
                    {
                        type Response = super::GetNotNotifyConversationIDsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetNotNotifyConversationIDsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_not_notify_conversation_i_ds(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetNotNotifyConversationIDsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/GetPinnedConversationIDs" => {
                    #[allow(non_camel_case_types)]
                    struct GetPinnedConversationIDsSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::GetPinnedConversationIDsReq>
                        for GetPinnedConversationIDsSvc<T>
                    {
                        type Response = super::GetPinnedConversationIDsResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPinnedConversationIDsReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::get_pinned_conversation_i_ds(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPinnedConversationIDsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/openim_conversation.conversation/ClearUserConversationMsg" => {
                    #[allow(non_camel_case_types)]
                    struct ClearUserConversationMsgSvc<T: Conversation>(pub Arc<T>);
                    impl<T: Conversation>
                        tonic::server::UnaryService<super::ClearUserConversationMsgReq>
                        for ClearUserConversationMsgSvc<T>
                    {
                        type Response = super::ClearUserConversationMsgResp;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ClearUserConversationMsgReq>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Conversation>::clear_user_conversation_msg(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ClearUserConversationMsgSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(empty_body());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for ConversationServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "openim_conversation.conversation";
    impl<T> tonic::server::NamedService for ConversationServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
