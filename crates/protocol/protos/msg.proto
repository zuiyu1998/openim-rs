// Copyright © 2023 OpenIM. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package openim_msg;

import "conversation.proto";
import "sdkws.proto";

message MsgDataToMQ {
  string token = 1;
  openim_sdkws.MsgData msgData = 2;
}

message MsgDataToDB {
  openim_sdkws.MsgData msgData = 1;
}

message PushMsgDataToMQ {
  openim_sdkws.MsgData msgData = 1;
  string conversationID = 2;
}

message MsgDataToMongoByMQ {
  int64 lastSeq = 1;
  string conversationID = 2;
  repeated openim_sdkws.MsgData msgData = 3;
}

message GetMaxAndMinSeqReq {
  string UserID = 1;
}
message GetMaxAndMinSeqResp {
  int64 MaxSeq = 1;
  int64 MinSeq = 2;
}

message SendMsgReq {
  openim_sdkws.MsgData msgData = 3;
}

message SendMsgResp {
  string serverMsgID = 1;
  string clientMsgID = 2;
  int64 sendTime = 3;
}

message SetSendMsgStatusReq {
  int32 status = 1;
}

message SetSendMsgStatusResp {}

message GetSendMsgStatusReq {}

message GetSendMsgStatusResp {
  int32 status = 1;
}

message MsgDataToModifyByMQ {
  repeated openim_sdkws.MsgData messages = 1;
  string conversationID = 2;
}

message DelMsgsReq {}

message DelMsgsResp {}

message RevokeMsgReq {
  string conversationID = 1;
  int64 seq = 2;
  string userID = 3;
}

message RevokeMsgResp {}

message MarkMsgsAsReadReq {
  string conversationID = 1;
  repeated int64 seqs = 2;
  string userID = 3;
}

message MarkMsgsAsReadResp {}

message MarkConversationAsReadReq {
  string conversationID = 1;
  string userID = 2;
  int64 hasReadSeq = 3;
  repeated int64 seqs = 4;
}

message MarkConversationAsReadResp {}

message SetConversationHasReadSeqReq {
  string conversationID = 1;
  string userID = 2;
  int64 hasReadSeq = 3;
  bool noNotification = 4;
}

message SetConversationHasReadSeqResp {}

message DeleteSyncOpt {
  bool IsSyncSelf = 3;
  bool IsSyncOther = 4;
}

message ClearConversationsMsgReq {
  repeated string conversationIDs = 1;
  string userID = 2;
  DeleteSyncOpt deleteSyncOpt = 3;
}

message ClearConversationsMsgResp {}

message UserClearAllMsgReq {
  string userID = 1;
  DeleteSyncOpt deleteSyncOpt = 3;
}

message UserClearAllMsgResp {}

message DeleteMsgsReq {
  string conversationID = 1;
  repeated int64 seqs = 2;
  string userID = 3;
  DeleteSyncOpt deleteSyncOpt = 4;
}

message DeleteMsgsResp {}

message DeleteMsgPhysicalReq {
  repeated string conversationIDs = 1;
  int64 timestamp = 2;
}

message DeleteMsgPhysicalResp {}

message DeleteMsgPhysicalBySeqReq {
  string conversationID = 1;
  repeated int64 seqs = 2;
}

message DeleteMsgPhysicalBySeqResp {}

message GetMaxSeqsReq {
  repeated string conversationIDs = 1;
}

message GetHasReadSeqsReq {
  string userID = 1;
  repeated string conversationIDs = 2;
}

message SeqsInfoResp {
  map<string, int64> maxSeqs = 1;
}

message GetMsgByConversationIDsReq {
  repeated string conversationIDs = 1;
  map<string, int64> maxSeqs = 2;
}

message GetMsgByConversationIDsResp {
  map<string, openim_sdkws.MsgData> msgDatas = 1;
}

message GetConversationMaxSeqReq {
  string conversationID = 1;
}

message GetConversationMaxSeqResp {
  int64 maxSeq = 1;
}

message GetConversationsHasReadAndMaxSeqReq {
  string userID = 1;
  repeated string conversationIDs = 2;
}

message Seqs {
  int64 maxSeq = 1;
  int64 hasReadSeq = 2;
  int64 maxSeqTime = 3;
}

message GetConversationsHasReadAndMaxSeqResp {
  map<string, Seqs> seqs = 1;
}

message GetActiveUserReq {
  int64 start = 1;
  int64 end = 2;
  bool ase = 3;
  bool group = 4;
  openim_sdkws.RequestPagination pagination = 5;
}

message ActiveUser {
  openim_sdkws.UserInfo user = 1;
  int64 count = 2;
}

message GetActiveUserResp {
  int64 msgCount = 1;
  int64 userCount = 2;
  map<string, int64> dateCount = 3;
  repeated ActiveUser users = 4;
}

message GetActiveGroupReq {
  int64 start = 1;
  int64 end = 2;
  bool ase = 3;
  openim_sdkws.RequestPagination pagination = 4;
}

message ActiveGroup {
  openim_sdkws.GroupInfo group = 1;
  int64 count = 2;
}

message GetActiveGroupResp {
  int64 msgCount = 1;
  int64 groupCount = 2;
  map<string, int64> dateCount = 3;
  repeated ActiveGroup groups = 4;
}

message SearchMessageReq {
  string sendID = 1; //发送者ID
  string recvID = 2; //接收者ID
  int32 contentType = 3;
  string sendTime = 4;
  int32 sessionType = 5;
  openim_sdkws.RequestPagination pagination = 6;
}

message SearchChatLog {
  ChatLog chatLog = 1;
  bool isRevoked = 2;
}

message SearchedMsgData {
  openim_sdkws.MsgData msgData = 1;
  bool isRevoked = 2;
}

message SearchMessageResp {
  repeated SearchChatLog chatLogs = 1;
  int32 chatLogsNum = 2;
}

message ChatLog {
  string serverMsgID = 1;
  string clientMsgID = 2;
  string sendID = 3;
  string recvID = 4;
  string groupID = 5;
  string recvNickname = 6;
  int32 senderPlatformID = 7;
  string senderNickname = 8;
  string senderFaceURL = 9;
  string groupName = 10;
  int32 sessionType = 11;
  int32 msgFrom = 12;
  int32 contentType = 13;
  string content = 14;
  int32 status = 15;
  int64 sendTime = 16;
  int64 createTime = 17;
  string ex = 18;
  string groupFaceURL = 19;
  uint32 groupMemberCount = 20;
  int64 seq = 21;
  string groupOwner = 22;
  int32 groupType = 23;
}

message batchSendMessageReq {
  repeated string recvIDList = 1;
  openim_sdkws.MsgData msgData = 2;
}

message batchSendMessageResp {}
message GetServerTimeReq {}
message GetServerTimeResp {
  int64 serverTime = 1;
}

message ClearMsgReq {
  repeated openim_conversation.Conversation conversations = 1;
}

message ClearMsgResp {}

message DestructMsgsReq {
  int64 timestamp = 1;
  int32 limit = 2;
}

message DestructMsgsResp {
  int32 count = 1;
}

message SetUserConversationsMinSeqReq {
  repeated string userIDs = 1;
  string conversationID = 2;
  int64 seq = 3;
}

message SetUserConversationsMinSeqResp {}

message ConversationSeqs {
  string conversationID = 2;
  repeated int64 seqs = 3;
}

message GetSeqMessageReq {
  string userID = 1;
  repeated ConversationSeqs conversations = 2;
  openim_sdkws.PullOrder order = 3;
}

message GetSeqMessageResp {
  map<string, openim_sdkws.PullMsgs> msgs = 1;
  map<string, openim_sdkws.PullMsgs> notificationMsgs = 2;
}

message GetActiveConversationReq {
  repeated string conversationIDs = 1;
  int64 limit = 2;
}

message ActiveConversation {
  string conversationID = 1;
  int64 lastTime = 2;
  int64 maxSeq = 3;
}

message GetActiveConversationResp {
  repeated ActiveConversation conversations = 1;
}

message AppendStreamMsgReq {
  string clientMsgID = 1;
  int64 startIndex = 2;
  repeated string packets = 3;
  bool end = 4;
}

message AppendStreamMsgResp {}

message GetStreamMsgReq {
  string clientMsgID = 1;
}

message GetStreamMsgResp {
  string clientMsgID = 1;
  string conversationID = 2;
  string userID = 3;
  repeated string packets = 4;
  bool end = 5;
  int64 createTime = 6;
  int64 deadlineTime = 7;
}

message SetUserConversationMaxSeqReq {
  string conversationID = 1;
  repeated string ownerUserID = 2;
  int64 maxSeq = 3;
}
message SetUserConversationMaxSeqResp {}

message SetUserConversationMinSeqReq {
  string conversationID = 1;
  repeated string ownerUserID = 2;
  int64 minSeq = 3;
}
message SetUserConversationMinSeqResp {}

message GetLastMessageSeqByTimeReq {
  string conversationID = 1;
  int64 time = 2;
}

message GetLastMessageSeqByTimeResp {
  int64 seq = 1;
}

message GetLastMessageReq {
  string userID = 1;
  repeated string conversationIDs = 2;
}
message GetLastMessageResp {
  map<string,openim_sdkws.MsgData> msgs = 1;
}

service msg {
  //发送消息
  rpc SendMsg(SendMsgReq) returns (SendMsgResp);
}

